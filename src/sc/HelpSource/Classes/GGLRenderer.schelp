class:: GGLRenderer
summary:: A GL-Renderer
related:: Reference/scgraph
categories::  SCGraph>Renderer


Description::

A GL-Renderer


classmethods::

method::gr

argument::in

argument::clear_mode

0 = clear to clear_color, 1 = alpha blend clear_color

argument::clear_color


argument::lighting

0 = off, 1 = on

argument::culling
0 = off, 1 = on

argument::transparency = 0

0 = off, 1 = on

argument::perspective 

0 = orthographic, 1 = stereographic

argument::fov

degrees

argument::near_plane

near viewing plane distance

argument::far_plane

far viewing plane distance

argument::eye

eye coordinates of viewer

argument::center

coordinates of what we look at

argument::up

up vector of viewer

argument::fog

0 = off, 1 = on

argument::fog_mode

0 = GL_LINEAR, 1 = GL_EXP, and 2 = GL_EXP2

argument::fog_density

between 0 and 1

argument::fog_start

argument::fog_end  

argument::fog_niceness

0 = don't care, 1 = fastest, 2 = nicest

argument::fog_color

argument::texturing 

0 - off, 1 = on



EXAMPLES::

Boot a scgraph server:

code::
g = GServer.default;
g.boot;
::

Example of a renderer that reads from Bus 0. You can "kill" the
synth by closing the window. This renderer has central perspective
turned off (useful for 2D stuff):

code::
{GGLRenderer.gr(in: In.gr(0), perspective: 0)}.play(g)
::

A renderer that reads from graphics bus 0 and features support for
texturing, alpha blending and lighting:

code::
(
{GGLRenderer.gr(
	in: In.gr(0), 
	texturing: 1,
	transparency: 1,
	lighting: 1
)}.play(g)
)
::


A simple example of a Synth that writes to a bus. Evaluate this after the above, 
so the geometry producer is added to the head of the group and it gets to 
create its output before the renderer tries to read it :)

code::
(
SynthDef(\foo, 	{
	Out.gr(
		0, 
		GColor.gr(
			GQuad.gr,
			[0.5 + (0.5 * SinOsc.kr(1.1, phase: 0.3)), 0.5 + (0.5 * SinOsc.kr(1.0)), 0, 0]
		)
	)
}).play(g)
)
::