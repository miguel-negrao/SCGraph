class:: GBlending
summary:: Set the blend mode.
related:: Reference/scgraph
categories::  SCGraph>Texture


Description::
To use alpha blending you need to do three things
list::
## Color your primitives with an alpha component between
  0 and 1 (either by using a material when using lighting
  or by using GColor)
## Enable transparency in the GGLRenderer that renders the 
  primitive
## Put a GBlending object onto the bus before the primitive(s)
  for which alpha blending shall be performed.
::
A "meta" graphics object to control the state of the blending
functionality in OpenGL (src and dst are documented in source).

The blending functions are symbols that closely relate to 
OpenGL blending functions. So take a look at the Red Book or
other OpenGL documentation..

Blending options:
list::
## \blendZero

## \blendOne

## \blendDstColor

## \blendSrcColor 

## \blendOneMinusDstColor

## \blendOneMinusSrcColor

## \blendSrcAlpha 

## \blendOneMinusSrcAlpha

## \blendDstAlpha 

## \blendOneMinusDstAlpha

## \blendSrcAlphaSaturate
::

classmethods::

method::gr


EXAMPLES::

Boot a scgraph server:

code::
g = GServer.default;
g.boot;
::


Keep mouse pointer in the center of the screen to zoom in :)

code::
(
SynthDef (\TestBlend,
{
	var cube1, cube2, cube3, eye, stretch1, stretch2, stretch3;

	stretch1 = 1 + Lag.kr(2*Decay.kr(Dust.kr(1)), 0.5);
	stretch2 = 3 + Lag.kr(2*Decay.kr(Dust.kr(2)), 0.5);
	stretch3 = 5 + Lag.kr(2*Decay.kr(Dust.kr(3)), 0.5);

	cube1 = GStretch.gr(
		GMaterial.gr(
			GCube.gr,
			shinyness: 0.5,
			diffuse: [0.8, 0.3, 0.1, 0.031],
			ambient: [0.1, 0.8, 0.2, 0.005]
		),
		[stretch1, stretch1, stretch1]);

	cube2 = GStretch.gr(
		GMaterial.gr(
			GCube.gr,
			shinyness: 0.5,
			diffuse: [0.1, 0.8, 0.5, 0.06],
			ambient: [0.3, 0.4, 0.1, 0.018]),
		[stretch2, stretch2, stretch2]);

	cube3 = GStretch.gr(
		GMaterial.gr(
			GCube.gr,
			shinyness: 0.5,
			diffuse: [0.2, 0.3, 0.9, 0.12],
			ambient: [0.7, 0.2, 0.6, 0.11]),
		[stretch3, stretch3, stretch3]);

	eye = 10 * [
        MouseX.kr(-10,10) + SinOsc.kr(freq: 0.111),
         MouseY.kr(-10,10) + SinOsc.kr(freq: 0.132), 
         SinOsc.kr(freq: 0.134)];

	GGLRenderer.gr(
		eye: eye, 
		lighting: 1,
		transparency: 1,

		in:
		GTranslate.gr(
			displacement_vector:
			[
				Lag.kr(WhiteNoise.kr,1),
				Lag.kr(WhiteNoise.kr,1),
				Lag.kr(WhiteNoise.kr,1)	],

			in:
			GLighting.gr(1) 
			+ GLight.gr(
				index: 0, on: 1, 
				diffuse_color: [0.3, 0.5, 0.4, 0.5], 
				specular_color: [1,1,1,0.5],
				ambient_color: [1, 1, 1, 0.1],
				position:[30, 15, 10, 1]) 
			+ GLight.gr(
				index: 1, on: 1, 
				diffuse_color: [0.3, 0.1, 0.7, 0.5], 
				specular_color: [1,1,1,0.5],
					position:[-30, -15, -10, 1]) 	
			+ GBlending.gr(on: 1)
			+ cube1 
			+ cube2 
			+ cube3)
	);
}).play(g)
)
::